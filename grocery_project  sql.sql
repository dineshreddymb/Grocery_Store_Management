create database if not exists grosary_store; 
use grosary_store;

-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);


-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);




-- Analysis Questions
-- 1. Customer Insights
--  Gain an understanding of customer engagement and purchasing behavior.


-- 1.1How many unique customers have placed orders?
select * from orders;
select count(uni_cust) as total_unique_cust from (select distinct cust_id as uni_cust from orders) as uni_cust_id;

-- 1.2 Which customers have placed the highest number of orders?
select * from customers where cust_id =(select  cust_id from orders 
group by cust_id order by count(*) desc limit 1) ;


-- 1.3 What is the total and average purchase value per customer?
select o.cust_id,
       sum(od.total_price) as total_purchase,
       avg(od.total_price) as avg_purchase
from orders o
join order_details od 
     on o.ord_id = od.ord_id
group by o.cust_id;


-- 1.4 Who are the top 5 customers by total purchase amount?
select o.cust_id,
       sum(od.total_price) as total_purchase
from orders o
join order_details od 
     on o.ord_id = od.ord_id
group by o.cust_id
order by total_purchase desc
limit 5;


-- 2. Product Performance
-- Evaluate how well products are performing in terms of sales and revenue.
-- 2.1 How many products exist in each category?

select c.cat_id, c.cat_name, count(p.prod_id) as no_of_products
from categories c
join products p 
       on c.cat_id = p.cat_id
group by  c.cat_id, c.cat_name;

-- 2.2 What is the average price of products by category?

select c.cat_id, c.cat_name,
       avg(p.price) as avg_price_of_products
from categories c
join products p 
     on c.cat_id = p.cat_id
group by c.cat_id, c.cat_name;

-- 2.3 Which products have the highest total sales volume (by quantity)?

select p.prod_id, p.prod_name,
       sum(od.quantity) as total_quantity_sold
from products p
join order_details od 
     on p.prod_id = od.prod_id
group by p.prod_id, p.prod_name
order by total_quantity_sold desc;


-- 2.4 What is the total revenue generated by each product?

select p.prod_id,p.prod_name,sum(o.total_price) as total_revenue from order_details o
join products p on p.prod_id=o.prod_id
group by p.prod_id,p.prod_name;


-- 2.5 How do product sales vary by category and supplier?


select  c.cat_id,
       c.cat_name,
       s.sup_id,
       s.sup_name,
       SUM(od.total_price) as total_sales
from order_details od
join products p 
     on od.prod_id = p.prod_id
join categories c 
     on p.cat_id = c.cat_id
join supplier s 
     on p.sup_id = s.sup_id
group by c.cat_id, c.cat_name, s.sup_id, s.sup_name
order by total_sales desc;




-- 3. Sales and Order Trends
-- Analyze business performance through orders and revenue over time.
-- 3.1 How many orders have been placed in total?
select count(*) as total_orders  from orders ;

-- 3.2 What is the average value per order?
select avg(order_total) as avg_order_value
from (
    select ord_id, SUM(total_price) as order_total
    from order_details
    group by ord_id
) as subquery;



-- 3.3 On which dates were the most orders placed?
select count(ord_id) as total_orders ,order_date from orders 
group by order_date order by total_orders desc;

-- 3.4 What are the monthly trends in order volume and revenue?

select 
    DATE_FORMAT(STR_TO_DATE(o.order_date, '%m/%d/%Y'), '%Y-%m') AS order_month,
    COUNT(DISTINCT o.ord_id) AS total_orders,
    SUM(od.total_price) AS total_revenue
from orders o
join order_details od 
     on o.ord_id = od.ord_id
group by DATE_FORMAT(STR_TO_DATE(o.order_date, '%m/%d/%Y'), '%Y-%m')
order by order_month;

-- 3.5 How do order patterns vary across weekdays and weekends?

select
    case
        when DAYOFWEEK(STR_TO_DATE(o.order_date, '%m/%d/%Y')) IN (1, 7) 
            then 'Weekend'   -- Sunday(1), Saturday(7)
        else 'Weekday'
    end as  day_type,
    COUNT(DISTINCT o.ord_id) AS order_volume,
    IFNULL(SUM(od.total_price), 0) AS total_revenue
from orders o
left join order_details od 
       on o.ord_id = od.ord_id
group by day_type
order by day_type;



-- 4️. Supplier Contribution
-- Identify the most active and profitable suppliers.
-- 4.1 How many suppliers are there in the database?
select count(sup_id) as total_supliers from supplier;

-- 4.2 Which supplier provides the most products?

select s.sup_id, s.sup_name, COUNT(p.prod_id) AS total_products
from supplier s
join products p 
    on s.sup_id = p.sup_id
group by s.sup_id, s.sup_name;

-- 4.3 What is the average price of products from each supplier?

select s.sup_id,s.sup_name,avg(p.price) as avg_price
from supplier s
join products p 
on s.sup_id = p.sup_id
group by s.sup_id, s.sup_name
order by avg_price desc;

-- 4.4 Which suppliers contribute the most to total product sales (by revenue)?

select s.sup_id,s.sup_name,sum(od.total_price) as total_revenue
from supplier s
join products p 
    on s.sup_id = p.sup_id
join order_details od 
    on p.prod_id = od.prod_id
group by s.sup_id, s.sup_name
order by total_revenue desc;

-- 5️. Employee Performance
-- Assess how employees are handling and influencing sales.
-- 5.1 How many employees have processed orders?

select count(distinct o.emp_id) as employees_with_orders
from orders o
join employees e
     on o.emp_id = e.emp_id;


-- 5.2 Which employees have handled the most orders?

select e.emp_id, e.emp_name,
       count(o.ord_id) as total_orders
from employees e
join orders o 
     on e.emp_id = o.emp_id
group by e.emp_id, e.emp_name
order by total_orders desc;


-- 5.3 What is the total sales value processed by each employee?

select e.emp_id, e.emp_name,
       sum(od.total_price) as total_sales_value
from employees e
join orders o 
     on e.emp_id = o.emp_id
join order_details od 
     on o.ord_id = od.ord_id
group by e.emp_id, e.emp_name
order by total_sales_value desc;


-- 5.4 What is the average order value handled per employee?
select e.emp_id, e.emp_name,
       avg(order_totals.order_value) as avg_order_value
from employees e
join (
    select o.ord_id, o.emp_id, SUM(od.total_price) AS order_value
    from orders o
    join order_details od 
         on o.ord_id = od.ord_id
    group by o.ord_id, o.emp_id
) as order_totals
on e.emp_id = order_totals.emp_id
group by e.emp_id, e.emp_name
order by avg_order_value desc;

-- 6️. Order Details Deep Dive
-- Explore item-level sales patterns and pricing behavior.
-- 6.1 What is the relationship between quantity ordered and total price?
select quantity, avg(quantity*each_price) as avg_total_price
from order_details 
group by quantity
order by quantity;


-- 6.2 What is the average quantity ordered per product?
select ord.prod_id,p.prod_name,round(avg(quantity)) as avg_quantity  from order_details ord  
join products p on p.prod_id=ord.prod_id group by prod_id;

-- 6.3How does the unit price vary across products and orders?
select p.prod_id, p.prod_name,
       avg(od.total_price / od.quantity) as avg_unit_price,
       min(od.total_price / od.quantity) as min_unit_price,
       min(od.total_price / od.quantity) as max_unit_price
from order_details od
join products p 
     on od.prod_id = p.prod_id
group by p.prod_id, p.prod_name
order by avg_unit_price DESC;



select
    p.prod_id,
    p.prod_name,
    min(oi.each_price) as min_price,
	max(oi.each_price) as max_price,
    avg(oi.each_price) as avg_price
from order_details oi
join products p on oi.prod_id = p.prod_id
group by p.prod_id, p.prod_name
order by avg_price desc;


